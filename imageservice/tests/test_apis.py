""""
To run the test, start the uvicorn server and run the below command
- PYTHONPATH=src python3 src/imageservice/api.py
- PYTHONPATH=src pytest tests/ --debug -s
"""


import json
import requests
import logging

logger = logging.getLogger("test_logger")

userId="3241"
bucket_name=""

message = '""'

def test_upload_image():

    url = 'http://localhost:8000/upload?userId=3241'
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json',
    }
    response = requests.post(url, headers=headers, data=message)
    assert response.status_code == 200

def test_list_images():

    url = 'http://localhost:8000/list?userId=3241'
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json',
    }
    response = requests.get(url, headers=headers)
    assert response.status_code == 200
    assert len(response.content) != 0
    return response.content

def test_view_image():
    content = json.loads(test_list_images())
    url = 'http://localhost:8000/list'
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json',
    }
    for time in content.get("thumbnails",[]):
        timestamp = time.get("timestamp")
        response = requests.get(url, headers=headers,params={
            "timestamp" :timestamp,
            "userId": "3241"
        })
        assert response.status_code == 200

def test_delete_image():
    content = json.loads(test_list_images())
    url = 'http://localhost:8000/delete'
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json',
    }
    for time in content.get("thumbnails",[]):
        timestamp = time.get("timestamp") 
        response = requests.post(url, headers=headers,params={
            "timestamp" :timestamp,
            "userId": "3241"
        })
        assert response.status_code == 200
